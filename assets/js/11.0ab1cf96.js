(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{196:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"mock-definition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mock-definition"}},[t._v("#")]),t._v(" Mock Definition")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("id\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Name of this mock\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Description for this mock\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Required")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: defaults to matching any method")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Regex: true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" GET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("POST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("PUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("DELETE\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Required: the path to match this mock to")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Regex: true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a/path/to/match\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: list of header values to use for matching requests")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Regex: true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("headers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("x-some-custom-header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any value\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: JSON/Text used to match incoming requests to this mock")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Regex: true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" json/text\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: Defines a destination to forward the request to instead")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: The protocol to use to forward request. Defaults to the original request protocol")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("http\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: remote port of the server. Defaults to the original request port")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Optional")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("followRedirect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("skipVerifyTLS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional:  extra headers to forward to the remote host")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("headers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" map\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: Defaults to 200")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any http status code\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Optional: Defaults to empty string")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" json object/text\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: defaults to null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" read the response from a file on the server instead of the inline response\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: Response headers ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("headers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("some_header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" some_header_value_like_cookies\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: defaults to immediately")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("delay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" seconds to delay the response. defaults to 0\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional: defaults to unlimited")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("limit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" (number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("unlimited). how many times this mock should be used. defaults to unlimited\n\n")])])]),a("p",[t._v("Mocks can either be created by initialization see "),a("a",{attrs:{href:"./start"}},[t._v("Start Guide")]),t._v(", the "),a("a",{attrs:{href:"./api"}},[t._v("REST API")]),t._v(" or via the dashboard")]),t._v(" "),a("h2",{attrs:{id:"request-definition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-definition"}},[t._v("#")]),t._v(" Request Definition")]),t._v(" "),a("h3",{attrs:{id:"simple-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-path"}},[t._v("#")]),t._v(" Simple Path")]),t._v(" "),a("p",[t._v("Deputy server will default to "),a("code",[t._v(".*")]),t._v(" i.e match all methods and "),a("code",[t._v("HTTP 200")]),t._v(" response code for matched Behaviors if they are omitted from the Behavior document.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/a_simple_task\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" A simple task\n\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Responds with a 200 Ok "A sample task"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/a_simple_task\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404 Not Found")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/another_task\n")])])]),a("h3",{attrs:{id:"regex-paths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regex-paths"}},[t._v("#")]),t._v(" Regex Paths")]),t._v(" "),a("p",[t._v("Behaviors can use regex paths for matching a request to a configured Behavior. e.g")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Regex based url\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200 Ok")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200 Ok")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/2\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404 Not Found")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/a_simple_taks\n")])])]),a("h3",{attrs:{id:"path-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-parameters"}},[t._v("#")]),t._v(" Path Parameters")]),t._v(" "),a("p",[t._v("The server can match http requests using dynamic path parameters e.g")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("/docs/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("docId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pathParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[0-9]+"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("docId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[a-z]+.jpg"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Task doc\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123/doc/image.jpg\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123/doc/cat.png\n")])])]),a("h3",{attrs:{id:"query-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-parameters"}},[t._v("#")]),t._v(" Query Parameters")]),t._v(" "),a("p",[t._v("The server can also match dynamic query parameters. e.g")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("completed="),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("isCompleted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("queryParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("isCompleted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("false\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Some completed tasks\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123?isCompleted"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\n")])])]),a("h3",{attrs:{id:"headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#headers"}},[t._v("#")]),t._v(" Headers")]),t._v(" "),a("p",[t._v("The server can match requests based on http request header values. The configured request header values will matched as a subset of the received request headers.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("headers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("X-Mock-Id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" match header values\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123 -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X-Mock-Id: mock-abcde"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n")])])]),a("h3",{attrs:{id:"request-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-methods"}},[t._v("#")]),t._v(" Request Methods")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" DELETE\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Task has been deleted\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Respond with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X DELETE http://localhost:8080/tasks/123\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Respond with a 404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" http://localhost:8080/tasks/123\n")])])]),a("h3",{attrs:{id:"request-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-body"}},[t._v("#")]),t._v(" Request Body")]),t._v(" "),a("p",[t._v("Behaviors can also be matched using the request body. The server will inspect the content-type of the request method to determine how to handle the request body.")]),t._v(" "),a("h4",{attrs:{id:"json-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-body"}},[t._v("#")]),t._v(" JSON Body")]),t._v(" "),a("p",[t._v("Http requests with a "),a("code",[t._v("Content-Type: application/json")]),t._v(" header will have its body treated like a json object. The request body will be matched as a superset of the Behavior body. e.g")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" POST\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" john_doe\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Task has been deleted\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8080/tasks -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{ "name": "simple-task", "user": "john_doe" }\'')]),t._v(" -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8080/tasks -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{ "name": "simple-task" }\'')]),t._v(" -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v("\n")])])]),a("h4",{attrs:{id:"plain-text-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plain-text-body"}},[t._v("#")]),t._v(" Plain Text Body")]),t._v(" "),a("p",[t._v("Requests without a specified "),a("code",[t._v("Content-Type")]),t._v(" will default to string")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" john_doe\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" no tasks for this person\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"john_doe\"'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8080/tasks -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someone_else'")]),t._v("\n")])])]),a("h4",{attrs:{id:"regex-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regex-body"}},[t._v("#")]),t._v(" Regex Body")]),t._v(" "),a("p",[t._v("Behaviors can also be matched using a regex body either as a json document or plain text. e.g")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" POST\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Task has been deleted\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8080/tasks -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{ "name": "task-123", id: 2 }\'')]),t._v(" -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8080/tasks -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{ "name": "other_tasks", id: 2 }\'')]),t._v(" -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v("\n")])])]),a("h2",{attrs:{id:"response"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response"}},[t._v("#")]),t._v(" Response")]),t._v(" "),a("p",[t._v("The server response can also be tailored using the Behavior document.")]),t._v(" "),a("h3",{attrs:{id:"limited"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limited"}},[t._v("#")]),t._v(" Limited")]),t._v(" "),a("p",[t._v("The server can limit the amount of instance a Behavior is used to respond to the http requests it matches. Http requests received after the response limit has been reached will result in a "),a("code",[t._v("404")]),t._v(" response.")]),t._v(" "),a("p",[t._v("The default response limit is "),a("code",[t._v("unlimited")]),t._v(". e.g")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/123\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Task 123\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("limit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n")])])]),a("p",[t._v("Response limits can be combined to create some interesting scenarios, e.g first respond with 200s and then fail afterwards")]),t._v(" "),a("p",[t._v("The first 2 requests will be successful")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/123\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Task 123\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("limit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("p",[t._v("Subsequent requests should fail")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/123\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("statusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Sever blew up\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 500")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n")])])]),a("h3",{attrs:{id:"delayed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delayed"}},[t._v("#")]),t._v(" Delayed")]),t._v(" "),a("p",[t._v("By default, responses are sent immediately to the client when matched but the server can be instructed to delay in seconds when the server should send the response. e.g")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /tasks/123\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" some tasks\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("delay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),t._v("\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Responds with a 200 after 120 seconds")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET http://localhost:8080/tasks/123\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);